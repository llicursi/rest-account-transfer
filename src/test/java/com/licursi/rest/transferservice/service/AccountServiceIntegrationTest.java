package com.licursi.rest.transferservice.service;

import com.licursi.rest.transferservice.exceptions.BalanceConstraintViolationException;
import com.licursi.rest.transferservice.model.Account;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.math.BigDecimal;

import static org.assertj.core.api.Assertions.assertThat;


@RunWith(SpringRunner.class)
@SpringBootTest
public class AccountServiceIntegrationTest {

    @Autowired
    private AccountService accountService;

    // Tests for :
    // public Account save(Account account) {

    @Test
    public void whenSave_thenReturnAutoGeneratedId() {
        Account account = new Account();
        account.setName("Test Name");
        account.setBalance(new BigDecimal("1000.00"));

        Account accountSaved = accountService.save(account);
        assertThat(accountSaved.getId()).isNotZero();
    }

    @Test(expected = javax.validation.ConstraintViolationException.class)
    public void whenSaveNullName_throwException() {
        Account account = new Account();
        account.setBalance(new BigDecimal("1000.00"));

        accountService.save(account);
    }

    @Test()
    public void whenSaveNullName_throwExceptionWithPropertyPath() {
        Account account = new Account();
        account.setBalance(new BigDecimal("1000.00"));

        try {
            accountService.save(account);
        } catch (javax.validation.ConstraintViolationException c){
            assertThat(c.getConstraintViolations().size()).isGreaterThan(0);
            assertThat( c.getConstraintViolations().iterator().next().getPropertyPath().toString()).isEqualTo("name");
        }
    }

    @Test()
    public void whenSaveInvalidBalance_throwExceptionWithPropertyPath() {
        Account account = new Account();
        account.setName("Test Name");
        account.setBalance(new BigDecimal("0.0031987238"));

        try {
            accountService.save(account);
        } catch (javax.validation.ConstraintViolationException c) {
            assertThat(c.getConstraintViolations().size()).isGreaterThan(0);
            assertThat(c.getConstraintViolations().iterator().next().getPropertyPath().toString()).isEqualTo("balance");
        }
    }

    @Test(expected = BalanceConstraintViolationException.class)
    public void whenSaveNegativeBalance_throwException() {
        Account account = new Account();
        account.setName("Test Negative");
        account.setBalance(new BigDecimal("-1000.00"));

        accountService.save(account);
        assertThat(true).isTrue();

    }

    @Test()
    public void whenSaveNullBalance_thenReturnZeroBalance() {
        Account account = new Account();
        account.setName("Test Null Balance ");

        Account accountSaved = accountService.save(account);
        assertThat(accountSaved.getBalance()).isEqualTo(BigDecimal.ZERO);
    }


}