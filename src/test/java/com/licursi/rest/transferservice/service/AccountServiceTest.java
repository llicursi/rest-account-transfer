package com.licursi.rest.transferservice.service;

import com.licursi.rest.transferservice.exceptions.BalanceConstraintViolationException;
import com.licursi.rest.transferservice.model.Account;
import com.licursi.rest.transferservice.repository.AccountRepository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.test.context.junit4.SpringRunner;

import static com.licursi.rest.transferservice.AccountUtils.*;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;


@RunWith(SpringRunner.class)
public class AccountServiceTest {

    @Mock
    private AccountRepository accountRepository;

    @InjectMocks
    private AccountService accountService;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void whenSave_thenReturnAutoGeneratedId() {
        final Account account = generateAccountANullId();
        assertThat(account.getId()).isNull();

        when(accountRepository.save(any(Account.class))).thenReturn(generateAccountAWithId());

        Account accountSaved = accountService.save(account);
        assertThat(accountSaved.getId()).isNotNull();

        verify(accountRepository, times(1)).save(account);
        verifyNoMoreInteractions(accountRepository);
    }


    @Test(expected = BalanceConstraintViolationException.class)
    public void whenSaveNegativeBalance_throwException() {
        Account account = generateAccountANegative();
        accountService.save(account);

        verifyZeroInteractions(accountRepository);
    }





}